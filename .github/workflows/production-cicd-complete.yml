name: üöÄ Complete CI/CD Pipeline - Production Deployment

on:
  push:
    branches: [ main, production ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.12
  REGISTRY: ghcr.io
  IMAGE_NAME: zain-technologies-22/zain-hms

jobs:
  # üß™ Testing and Quality Assurance
  test:
    name: üß™ Run Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_zain_hms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov flake8 black isort safety bandit

      - name: üîç Code Quality Checks
        run: |
          # Format check
          black --check --diff .
          # Import sorting check
          isort --check-only --diff .
          # Linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: üîí Security Scan
        run: |
          # Check for known security vulnerabilities
          safety check
          # Static security analysis
          bandit -r . -x tests/ -f json -o bandit-report.json || true

      - name: üß™ Run Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_zain_hms
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: False
        run: |
          python manage.py migrate
          pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=70

      - name: üìä Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  # üèóÔ∏è Build and Push Docker Images
  build:
    name: üèóÔ∏è Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production' || startsWith(github.ref, 'refs/tags/'))
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  # üöÄ Deploy to Production
  deploy:
    name: üöÄ Deploy to Production Server
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/production' || startsWith(github.ref, 'refs/tags/')
    environment: production

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: üìã Add Server to Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: üè• Deploy ZAIN HMS to Production
        run: |
          # Create deployment package
          tar -czf deployment.tar.gz docker-compose.prod.yml docker/ scripts/
          
          # Copy deployment files to server
          scp deployment.tar.gz ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_IP }}:/tmp/
          
          # Execute deployment on server
          ssh ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} << 'EOF'
            set -e
            
            # Navigate to application directory
            cd /opt/zain_hms || { echo "Application directory not found"; exit 1; }
            
            # Extract new deployment files
            tar -xzf /tmp/deployment.tar.gz
            
            # Set environment variables
            export IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export SECRET_KEY="${{ secrets.SECRET_KEY }}"
            export ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}"
            export EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}"
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            
            # Create backup of current database
            echo "üîÑ Creating database backup..."
            mkdir -p backups/$(date +%Y%m%d_%H%M%S)
            docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U ${{ secrets.DB_USER }} ${{ secrets.DB_NAME }} > backups/$(date +%Y%m%d_%H%M%S)/backup.sql || true
            
            # Pull latest images
            echo "üì• Pulling latest Docker images..."
            docker-compose -f docker-compose.prod.yml pull
            
            # Graceful deployment with zero downtime
            echo "üöÄ Starting graceful deployment..."
            
            # Start new containers with different name
            docker-compose -f docker-compose.prod.yml up -d --scale web=2 --no-recreate
            
            # Wait for new containers to be healthy
            echo "‚è≥ Waiting for services to be healthy..."
            sleep 30
            
            # Remove old containers
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Clean up unused images
            docker image prune -f
            
            echo "‚úÖ Deployment completed successfully!"
          EOF
          
          # Clean up temporary files
          rm -f deployment.tar.gz

      - name: üè• Verify Deployment
        run: |
          # Wait for application to be fully ready
          sleep 60
          
          # Health check
          ssh ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} << 'EOF'
            # Check if all containers are running
            if docker-compose -f /opt/zain_hms/docker-compose.prod.yml ps | grep -q "Up"; then
              echo "‚úÖ All containers are running"
            else
              echo "‚ùå Some containers are not running"
              docker-compose -f /opt/zain_hms/docker-compose.prod.yml ps
              exit 1
            fi
            
            # Check application health
            if curl -f http://localhost/health/ > /dev/null 2>&1; then
              echo "‚úÖ Application health check passed"
            else
              echo "‚ùå Application health check failed"
              exit 1
            fi
          EOF

      - name: üì® Send Deployment Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üè• ZAIN HMS Deployment ${{ job.status }}!
            
            ‚Ä¢ Environment: Production
            ‚Ä¢ Version: ${{ github.ref_name }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Author: ${{ github.actor }}
            
            ${{ job.status == 'success' && '‚úÖ Deployment successful!' || '‚ùå Deployment failed!' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # üîç Post-Deployment Monitoring
  monitor:
    name: üîç Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: üìä Run Performance Tests
        run: |
          # Install Apache Bench for basic load testing
          sudo apt-get update
          sudo apt-get install -y apache2-utils
          
          # Basic load test
          ab -n 100 -c 10 http://${{ secrets.PRODUCTION_SERVER_IP }}/health/

      - name: üîê Security Scan
        run: |
          # Basic security scan using nmap
          sudo apt-get install -y nmap
          nmap -sS -O ${{ secrets.PRODUCTION_SERVER_IP }}

      - name: üìà Update Monitoring Dashboard
        run: |
          echo "Deployment monitoring completed at $(date)"
          # Add integration with your monitoring system here