# Generated by Django 5.2.6 on 2025-09-22 20:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('appointments', '0001_initial'),
        ('patients', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunicationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('template_type', models.CharField(choices=[('reminder', 'Appointment Reminder'), ('confirmation', 'Appointment Confirmation'), ('cancellation', 'Appointment Cancellation'), ('reschedule', 'Reschedule Notice'), ('follow_up', 'Follow-up Reminder'), ('custom', 'Custom Message')], max_length=20)),
                ('channel', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('telegram', 'Telegram'), ('viber', 'Viber'), ('email', 'Email'), ('sms', 'SMS'), ('voice', 'Voice Call')], max_length=20)),
                ('subject_template', models.CharField(blank=True, help_text='Template for email subject (supports variables)', max_length=200)),
                ('message_template', models.TextField(help_text='Message template with variables: {patient_name}, {doctor_name}, {appointment_date}, etc.')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('template_type', 'channel')},
            },
        ),
        migrations.CreateModel(
            name='PatientCommunicationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow_whatsapp', models.BooleanField(default=True)),
                ('allow_telegram', models.BooleanField(default=True)),
                ('allow_viber', models.BooleanField(default=True)),
                ('allow_email', models.BooleanField(default=True)),
                ('allow_sms', models.BooleanField(default=True)),
                ('allow_voice', models.BooleanField(default=True)),
                ('preferred_time_start', models.TimeField(default='09:00')),
                ('preferred_time_end', models.TimeField(default='18:00')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('reminder_advance_hours', models.PositiveIntegerField(default=24, help_text='Hours before appointment to send reminder')),
                ('send_confirmation', models.BooleanField(default=True)),
                ('send_reminder', models.BooleanField(default=True)),
                ('send_follow_up', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='communication_preferences', to='patients.patient')),
            ],
        ),
        migrations.CreateModel(
            name='CommunicationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('telegram', 'Telegram'), ('viber', 'Viber'), ('email', 'Email'), ('sms', 'SMS'), ('voice', 'Voice Call')], max_length=20)),
                ('template_type', models.CharField(choices=[('reminder', 'Appointment Reminder'), ('confirmation', 'Appointment Confirmation'), ('cancellation', 'Appointment Cancellation'), ('reschedule', 'Reschedule Notice'), ('follow_up', 'Follow-up Reminder'), ('custom', 'Custom Message')], default='reminder', max_length=20)),
                ('recipient_phone', models.CharField(blank=True, max_length=20)),
                ('recipient_email', models.EmailField(blank=True, max_length=254)),
                ('message', models.TextField(help_text='Actual message sent')),
                ('subject', models.CharField(blank=True, help_text='Email subject or message title', max_length=200)),
                ('status', models.CharField(choices=[('sent', 'Sent'), ('delivered', 'Delivered'), ('read', 'Read'), ('failed', 'Failed'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if failed')),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('external_id', models.CharField(blank=True, help_text='External service message ID', max_length=100)),
                ('user_agent', models.TextField(blank=True, help_text='Browser/device info')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communications', to='appointments.appointment')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communications', to='patients.patient')),
                ('sent_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_communications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
                'indexes': [models.Index(fields=['appointment', 'channel'], name='communicati_appoint_b9f635_idx'), models.Index(fields=['patient', 'sent_at'], name='communicati_patient_c7823f_idx'), models.Index(fields=['status', 'sent_at'], name='communicati_status_c8545b_idx')],
            },
        ),
    ]
