# Generated by Django 5.2.6 on 2025-09-22 20:13

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('appointments', '0001_initial'),
        ('doctors', '0001_initial'),
        ('patients', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('record_type', models.CharField(choices=[('CONSULTATION', 'Consultation'), ('ADMISSION', 'Hospital Admission'), ('EMERGENCY', 'Emergency Visit'), ('FOLLOW_UP', 'Follow-up Visit'), ('PROCEDURE', 'Medical Procedure'), ('DISCHARGE', 'Discharge Summary')], default='CONSULTATION', max_length=20)),
                ('record_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('chief_complaint', models.TextField(help_text='Primary reason for visit')),
                ('history_of_present_illness', models.TextField(blank=True, help_text='Detailed history of current illness')),
                ('review_of_systems', models.TextField(blank=True, help_text='Review of systems')),
                ('physical_examination', models.TextField(blank=True, help_text='Physical examination findings')),
                ('clinical_assessment', models.TextField(blank=True, help_text='Clinical assessment and diagnosis')),
                ('treatment_plan', models.TextField(blank=True, help_text='Treatment plan and recommendations')),
                ('ai_diagnostic_suggestions', models.TextField(blank=True, help_text='AI-generated diagnostic suggestions (JSON)')),
                ('ai_treatment_recommendations', models.TextField(blank=True, help_text='AI treatment recommendations (JSON)')),
                ('ai_risk_assessment', models.TextField(blank=True, help_text='AI risk assessment (JSON)')),
                ('ai_confidence_score', models.FloatField(blank=True, help_text='AI confidence score (0.0-1.0)', null=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_instructions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='appointments.appointment')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_medical_records', to=settings.AUTH_USER_MODEL)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='doctors.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='patients.patient')),
            ],
            options={
                'ordering': ['-record_date'],
            },
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('test_name', models.CharField(help_text='Name of the laboratory test', max_length=200)),
                ('test_code', models.CharField(blank=True, help_text='Laboratory test code', max_length=50)),
                ('test_category', models.CharField(blank=True, help_text='Test category (e.g., Chemistry, Hematology)', max_length=100)),
                ('result_value', models.CharField(help_text='Test result value', max_length=200)),
                ('result_unit', models.CharField(blank=True, help_text='Unit of measurement', max_length=50)),
                ('reference_range', models.CharField(blank=True, help_text='Normal reference range', max_length=200)),
                ('status', models.CharField(choices=[('NORMAL', 'Normal'), ('ABNORMAL', 'Abnormal'), ('CRITICAL', 'Critical'), ('PENDING', 'Pending')], default='PENDING', max_length=20)),
                ('ordered_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('sample_collected_date', models.DateTimeField(blank=True, null=True)),
                ('result_date', models.DateTimeField(blank=True, null=True)),
                ('ai_interpretation', models.TextField(blank=True, help_text='AI interpretation of lab result (JSON)')),
                ('ai_clinical_significance', models.TextField(blank=True, help_text='AI assessment of clinical significance')),
                ('ai_recommendations', models.TextField(blank=True, help_text='AI-generated recommendations (JSON)')),
                ('ai_confidence_score', models.FloatField(blank=True, help_text='AI confidence in interpretation', null=True)),
                ('technician_notes', models.TextField(blank=True, help_text='Laboratory technician notes')),
                ('physician_notes', models.TextField(blank=True, help_text='Physician interpretation notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_lab_results', to=settings.AUTH_USER_MODEL)),
                ('ordered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordered_lab_results', to='doctors.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_results', to='patients.patient')),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lab_results', to='emr.medicalrecord')),
            ],
            options={
                'ordering': ['-result_date', '-ordered_date'],
            },
        ),
        migrations.CreateModel(
            name='ClinicalDecisionSupport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('DIAGNOSTIC', 'Diagnostic Recommendation'), ('TREATMENT', 'Treatment Recommendation'), ('MEDICATION', 'Medication Recommendation'), ('MONITORING', 'Monitoring Recommendation'), ('FOLLOW_UP', 'Follow-up Recommendation'), ('LIFESTYLE', 'Lifestyle Recommendation')], max_length=20)),
                ('title', models.CharField(help_text='Brief recommendation title', max_length=200)),
                ('description', models.TextField(help_text='Detailed recommendation description')),
                ('ai_reasoning', models.TextField(help_text='AI reasoning behind recommendation')),
                ('confidence_score', models.FloatField(help_text='AI confidence in recommendation (0.0-1.0)')),
                ('supporting_evidence', models.TextField(blank=True, help_text='Supporting medical evidence (JSON)')),
                ('is_implemented', models.BooleanField(default=False)),
                ('implementation_notes', models.TextField(blank=True, help_text='Notes on implementation')),
                ('implemented_at', models.DateTimeField(blank=True, null=True)),
                ('outcome_tracked', models.BooleanField(default=False)),
                ('outcome_notes', models.TextField(blank=True, help_text='Notes on outcome')),
                ('effectiveness_score', models.FloatField(blank=True, help_text='Effectiveness rating (0.0-1.0)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_clinical_decisions', to='doctors.doctor')),
                ('implemented_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='implemented_decisions', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_decisions', to='patients.patient')),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_decisions', to='emr.medicalrecord')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClinicalAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('CRITICAL_VITAL', 'Critical Vital Signs'), ('ABNORMAL_LAB', 'Abnormal Lab Results'), ('DRUG_INTERACTION', 'Drug Interaction'), ('ALLERGIC_REACTION', 'Allergic Reaction Risk'), ('CONTRAINDICATION', 'Medical Contraindication'), ('FOLLOW_UP_REQUIRED', 'Follow-up Required'), ('DIAGNOSTIC_SUGGESTION', 'Diagnostic Suggestion')], max_length=30)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=10)),
                ('title', models.CharField(help_text='Brief alert title', max_length=200)),
                ('message', models.TextField(help_text='Detailed alert message')),
                ('ai_confidence', models.FloatField(help_text='AI confidence in alert (0.0-1.0)')),
                ('ai_reasoning', models.TextField(blank=True, help_text='AI reasoning for generating alert')),
                ('ai_recommendations', models.TextField(blank=True, help_text='AI-recommended actions (JSON)')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('ACKNOWLEDGED', 'Acknowledged'), ('RESOLVED', 'Resolved'), ('DISMISSED', 'Dismissed')], default='ACTIVE', max_length=20)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes on how alert was resolved')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_alerts', to='patients.patient')),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clinical_alerts', to='emr.medicalrecord')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('medication_name', models.CharField(help_text='Generic or brand name', max_length=200)),
                ('dosage', models.CharField(help_text='Dosage (e.g., 10mg, 5ml)', max_length=100)),
                ('frequency', models.CharField(choices=[('ONCE_DAILY', 'Once Daily'), ('TWICE_DAILY', 'Twice Daily'), ('THREE_TIMES_DAILY', 'Three Times Daily'), ('FOUR_TIMES_DAILY', 'Four Times Daily'), ('AS_NEEDED', 'As Needed'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], default='ONCE_DAILY', max_length=20)),
                ('route', models.CharField(default='Oral', help_text='Route of administration', max_length=50)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('DISCONTINUED', 'Discontinued'), ('SUSPENDED', 'Suspended'), ('COMPLETED', 'Completed')], default='ACTIVE', max_length=20)),
                ('instructions', models.TextField(blank=True, help_text='Special instructions for taking medication')),
                ('indication', models.CharField(blank=True, help_text='Reason for prescription', max_length=200)),
                ('ai_interaction_analysis', models.TextField(blank=True, help_text='AI drug interaction analysis (JSON)')),
                ('ai_contraindication_alerts', models.TextField(blank=True, help_text='AI contraindication alerts (JSON)')),
                ('ai_risk_score', models.FloatField(blank=True, help_text='AI-calculated risk score', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_medications', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='emr.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='patients.patient')),
                ('prescribed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescribed_medications', to='doctors.doctor')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recorded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, help_text='Systolic blood pressure (mmHg)', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(250)])),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, help_text='Diastolic blood pressure (mmHg)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(150)])),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Heart rate (beats per minute)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Respiratory rate (breaths per minute)', null=True, validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(50)])),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Body temperature (°C)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(30.0), django.core.validators.MaxValueValidator(45.0)])),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, help_text='Oxygen saturation (%)', null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(100)])),
                ('weight', models.DecimalField(blank=True, decimal_places=1, help_text='Weight (kg)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(300.0)])),
                ('height', models.PositiveIntegerField(blank=True, help_text='Height (cm)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)])),
                ('ai_analysis_results', models.TextField(blank=True, help_text='AI analysis of vital signs (JSON)')),
                ('ai_alerts', models.TextField(blank=True, help_text='AI-generated alerts (JSON)')),
                ('ai_recommendations', models.TextField(blank=True, help_text='AI recommendations (JSON)')),
                ('overall_health_score', models.FloatField(blank=True, help_text='AI-calculated health score', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about vital signs')),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='emr.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='patients.patient')),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_vital_signs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['patient', 'record_date'], name='emr_medical_patient_de0c85_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['doctor', 'record_date'], name='emr_medical_doctor__67b910_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['record_type'], name='emr_medical_record__e18b9a_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['patient', 'result_date'], name='emr_labresu_patient_296d63_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['test_name', 'status'], name='emr_labresu_test_na_c13c71_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['ordered_date'], name='emr_labresu_ordered_ed60b4_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaldecisionsupport',
            index=models.Index(fields=['patient', 'is_implemented'], name='emr_clinica_patient_14097c_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaldecisionsupport',
            index=models.Index(fields=['doctor', 'created_at'], name='emr_clinica_doctor__c8a6a1_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicaldecisionsupport',
            index=models.Index(fields=['recommendation_type'], name='emr_clinica_recomme_189da7_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalalert',
            index=models.Index(fields=['patient', 'status'], name='emr_clinica_patient_61e4b3_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalalert',
            index=models.Index(fields=['severity', 'status'], name='emr_clinica_severit_40f59c_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalalert',
            index=models.Index(fields=['created_at'], name='emr_clinica_created_3c77e2_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['patient', 'status'], name='emr_medicat_patient_74c0b5_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['prescribed_by'], name='emr_medicat_prescri_b443b7_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['start_date'], name='emr_medicat_start_d_bddd3c_idx'),
        ),
        migrations.AddIndex(
            model_name='vitalsigns',
            index=models.Index(fields=['patient', 'recorded_at'], name='emr_vitalsi_patient_760866_idx'),
        ),
        migrations.AddIndex(
            model_name='vitalsigns',
            index=models.Index(fields=['recorded_at'], name='emr_vitalsi_recorde_bfd224_idx'),
        ),
    ]
