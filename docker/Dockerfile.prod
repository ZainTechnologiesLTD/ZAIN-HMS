# 🏥 ZAIN HMS Production Dockerfile
# Multi-stage build for optimized production deployment
# Optimized for Ubuntu server deployment

# Build stage
FROM python:3.12-slim as builder

# Build arguments
ARG PYTHON_VERSION=3.12
ARG VERSION=latest
ARG BUILD_DATE
ARG VCS_REF
ARG DEBIAN_FRONTEND=noninteractive

# Labels
LABEL org.opencontainers.image.title="ZAIN HMS" \
      org.opencontainers.image.description="Hospital Management System" \
      org.opencontainers.image.version="$VERSION" \
      org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.revision="$VCS_REF" \
      org.opencontainers.image.licenses="Proprietary"

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    curl \
    ca-certificates \
    && update-ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Configure pip for SSL and set trusted hosts
ENV PIP_TRUSTED_HOST="pypi.org pypi.python.org files.pythonhosted.org" \
    PIP_CERT=/etc/ssl/certs/ca-certificates.crt \
    PIP_TIMEOUT=300 \
    PIP_RETRIES=5

# Upgrade pip and install wheel with retry mechanism
RUN pip install --no-cache-dir --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies with retry mechanism
COPY requirements.txt .
RUN pip install --no-cache-dir \
    --trusted-host pypi.org \
    --trusted-host pypi.python.org \
    --trusted-host files.pythonhosted.org \
    --timeout 300 \
    --retries 5 \
    -r requirements.txt || \
    (sleep 10 && pip install --no-cache-dir \
    --trusted-host pypi.org \
    --trusted-host pypi.python.org \
    --trusted-host files.pythonhosted.org \
    --timeout 300 \
    --retries 5 \
    -r requirements.txt)

# Production stage
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    postgresql-client \
    curl \
    gettext \
    supervisor \
    ca-certificates \
    && update-ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create app user with proper permissions (match host UID for bind mounts)
RUN groupadd -r -g 1001 zain && \
    useradd -r -u 1001 -g zain -d /app -s /bin/bash zain && \
    mkdir -p /app /app/logs /app/media /app/staticfiles && \
    chown -R zain:zain /app

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=zain:zain . .

# Create necessary directories with correct permissions and log files
RUN mkdir -p logs media staticfiles backups && \
    touch logs/django.log logs/authentication.log logs/security.log && \
    chown -R zain:zain logs media staticfiles backups && \
    chmod 664 logs/*.log && \
    chmod +x docker/entrypoint.prod.sh

# Copy supervisor configuration
COPY docker/supervisord.prod.conf /etc/supervisor/conf.d/supervisord.conf

# Install application and collect static files
RUN python manage.py collectstatic --noinput --clear && \
    python manage.py compilemessages || true

# Health check script
RUN echo '#!/bin/bash\ncurl -f http://localhost:8000/health/ || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh

# Expose port
EXPOSE 8000

# Switch to app user
USER zain

# Entry point
ENTRYPOINT ["docker/entrypoint.prod.sh"]

# Default command
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "4", "--worker-class", "gthread", "--threads", "2", "--worker-connections", "1000", "--max-requests", "1000", "--max-requests-jitter", "100", "--preload", "--access-logfile", "-", "--error-logfile", "-", "--log-level", "info", "zain_hms.wsgi:application"]