# Automated Release Management Script for ZAIN HMS
#!/bin/bash

# Configuration
REPO_ORG="Zain-Technologies-22"
REPO_NAME="ZAIN-HMS"
CURRENT_BRANCH=$(git branch --show-current)
VERSION_FILE="zain_hms/version.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# Display banner
echo -e "${PURPLE}"
echo "╔═══════════════════════════════════════════════════╗"
echo "║              ZAIN HMS Release Manager             ║"
echo "║     Automated Version Management & Deployment     ║"
echo "╚═══════════════════════════════════════════════════╝"
echo -e "${NC}"

# Check if we're in the right repository
if [ ! -f "manage.py" ] || [ ! -d "zain_hms" ]; then
    error "This script must be run from the ZAIN HMS project root directory"
fi

# Check if GitHub CLI is installed and authenticated
if ! command -v gh &> /dev/null; then
    error "GitHub CLI is not installed. Install it from https://cli.github.com/"
fi

if ! gh auth status &> /dev/null; then
    error "Not authenticated with GitHub CLI. Run: gh auth login"
fi

# Function to get current version
get_current_version() {
    if [ -f "$VERSION_FILE" ]; then
        python3 -c "
import sys
sys.path.append('.')
try:
    from zain_hms.version import __version__
    print(__version__)
except:
    print('1.0.0')
"
    else
        echo "1.0.0"
    fi
}

# Function to increment version
increment_version() {
    local version=$1
    local type=$2
    
    IFS='.' read -r major minor patch <<< "$version"
    
    case $type in
        "major")
            echo "$((major + 1)).0.0"
            ;;
        "minor")
            echo "${major}.$((minor + 1)).0"
            ;;
        "patch")
            echo "${major}.${minor}.$((patch + 1))"
            ;;
        *)
            echo "$version"
            ;;
    esac
}

# Function to create version file
create_version_file() {
    local version=$1
    local build_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    local git_commit=$(git rev-parse HEAD)
    
    cat > $VERSION_FILE << EOF
# ZAIN HMS Version Information
# This file is automatically generated during release process

__version__ = "$version"
__build_date__ = "$build_date"
__git_commit__ = "$git_commit"

# Version components
VERSION_MAJOR = $(echo $version | cut -d. -f1)
VERSION_MINOR = $(echo $version | cut -d. -f2)
VERSION_PATCH = $(echo $version | cut -d. -f3)

# Release information
RELEASE_NAME = "ZAIN HMS v$version"
RELEASE_CODENAME = "$(date +%B) $(date +%Y) Release"

# Feature flags for this version
FEATURES = {
    'ai_clinical_support': True,
    'multi_tenant': True,
    'real_time_notifications': True,
    'mobile_responsive': True,
    'multi_language': True,
    'advanced_reporting': True,
    'emergency_management': True,
    'billing_system': True,
}

def get_version_info():
    """Get comprehensive version information"""
    return {
        'version': __version__,
        'build_date': __build_date__,
        'git_commit': __git_commit__,
        'release_name': RELEASE_NAME,
        'release_codename': RELEASE_CODENAME,
        'features': FEATURES,
    }
EOF
}

# Function to generate changelog
generate_changelog() {
    local version=$1
    local previous_version=$2
    
    log "Generating changelog for version $version"
    
    # Get commits since last version
    local commits=""
    if [ "$previous_version" != "1.0.0" ]; then
        commits=$(git log --oneline --pretty=format:"* %s" v$previous_version..HEAD)
    else
        commits=$(git log --oneline --pretty=format:"* %s" --max-count=50)
    fi
    
    # Create changelog entry
    local changelog_entry="
## Version $version - $(date +"%B %d, %Y")

### 🎯 What's New
- Enhanced AI clinical decision support
- Improved multi-tenant hospital management
- Better mobile responsiveness
- Performance optimizations

### 🐛 Bug Fixes
- Fixed appointment scheduling issues
- Resolved database routing problems
- Enhanced security measures

### 🔧 Technical Improvements
$commits

### 📊 Statistics
- Total commits: $(git rev-list --count HEAD)
- Contributors: $(git shortlog -sn | wc -l)
- Files changed: $(git diff --name-only v$previous_version..HEAD 2>/dev/null | wc -l || echo "N/A")

---
"
    
    # Prepend to CHANGELOG.md
    if [ -f "CHANGELOG.md" ]; then
        echo "$changelog_entry" | cat - CHANGELOG.md > temp && mv temp CHANGELOG.md
    else
        echo "# ZAIN HMS Changelog" > CHANGELOG.md
        echo "$changelog_entry" >> CHANGELOG.md
    fi
}

# Function to create GitHub release
create_github_release() {
    local version=$1
    local is_prerelease=$2
    
    log "Creating GitHub release for version $version"
    
    # Generate release notes
    local release_notes="
# ZAIN HMS v$version 🏥

## 🚀 Major Features
- **AI Clinical Decision Support**: Advanced clinical alerts and decision assistance
- **Multi-Tenant Architecture**: Complete hospital data isolation and management
- **Comprehensive EMR**: Electronic Medical Records with AI insights
- **Real-time Notifications**: Instant updates for critical medical events
- **Mobile Responsive**: Optimized for all devices and medical tablets

## 🏥 Healthcare Modules
- **Patient Management**: Complete patient registration and medical history
- **Doctor Management**: Specialist profiles and schedule management
- **Appointment System**: Online booking and automated scheduling
- **Emergency Department**: Triage and critical care management
- **Billing & Finance**: Automated invoicing and payment tracking
- **Laboratory Integration**: Lab results and diagnostic reporting
- **Pharmacy Management**: Medication tracking and prescription management

## 🔒 Security & Compliance
- HIPAA-compliant design patterns
- Multi-tenant data isolation
- Role-based access control
- Comprehensive audit trails
- Secure authentication system

## 🌐 Multi-Language Support
- English (Primary)
- Portuguese (Português)
- Arabic (العربية)
- Spanish (Español)

## 📱 Technical Stack
- **Backend**: Django 5.2.5, Python 3.11+
- **Database**: SQLite3 with multi-tenant routing
- **Frontend**: Bootstrap 5, HTML5, CSS3, JavaScript
- **AI Integration**: Clinical decision support algorithms
- **Charts**: Chart.js for medical data visualization

## 🛠️ Installation
\`\`\`bash
# Clone the repository
git clone https://github.com/$REPO_ORG/$REPO_NAME.git
cd $REPO_NAME

# Setup virtual environment
python -m venv venv
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt

# Run migrations
python manage.py migrate

# Create superuser
python manage.py createsuperuser

# Start development server
python manage.py runserver
\`\`\`

## 🔄 Automatic Updates
This version includes automatic update checking and deployment capabilities for production environments.

---
**Full Changelog**: https://github.com/$REPO_ORG/$REPO_NAME/compare/v$(get_previous_version $version)...v$version
"
    
    # Create the release
    local release_flags=""
    if [ "$is_prerelease" = "true" ]; then
        release_flags="--prerelease"
    fi
    
    gh release create "v$version" \
        --repo "$REPO_ORG/$REPO_NAME" \
        --title "ZAIN HMS v$version" \
        --notes "$release_notes" \
        $release_flags
    
    if [ $? -eq 0 ]; then
        success "GitHub release v$version created successfully"
        echo -e "${BLUE}🔗 Release URL: https://github.com/$REPO_ORG/$REPO_NAME/releases/tag/v$version${NC}"
    else
        error "Failed to create GitHub release"
    fi
}

# Function to get previous version
get_previous_version() {
    local current_version=$1
    git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1 | sed 's/^v//' || echo "1.0.0"
}

# Function to update Django settings with new version
update_django_settings() {
    local version=$1
    
    log "Updating Django settings with version $version"
    
    # Update version in settings files
    for settings_file in "zain_hms/settings.py" "zain_hms/production_settings.py"; do
        if [ -f "$settings_file" ]; then
            sed -i.bak "s/VERSION = .*/VERSION = '$version'/" "$settings_file" 2>/dev/null || true
        fi
    done
}

# Main menu
show_menu() {
    echo -e "\n${BLUE}🎯 Select Release Type:${NC}"
    echo "1) 🐛 Patch Release (Bug fixes)"
    echo "2) ✨ Minor Release (New features)" 
    echo "3) 🚀 Major Release (Breaking changes)"
    echo "4) 🧪 Pre-release (Alpha/Beta/RC)"
    echo "5) 📋 View Current Version"
    echo "6) 📊 Release Statistics"
    echo "7) 🏗️ Build & Deploy"
    echo "8) ❌ Exit"
    echo ""
    read -p "Enter your choice (1-8): " choice
}

# Main script logic
main() {
    local current_version=$(get_current_version)
    log "Current version: $current_version"
    
    show_menu
    
    case $choice in
        1)
            # Patch release
            local new_version=$(increment_version $current_version "patch")
            log "Creating patch release: $current_version → $new_version"
            
            create_version_file $new_version
            update_django_settings $new_version
            generate_changelog $new_version $current_version
            
            git add .
            git commit -m "🐛 Release v$new_version - Patch release with bug fixes"
            git tag -a "v$new_version" -m "ZAIN HMS v$new_version - Patch Release"
            git push origin $CURRENT_BRANCH --tags
            
            create_github_release $new_version false
            success "Patch release v$new_version completed successfully!"
            ;;
            
        2)
            # Minor release
            local new_version=$(increment_version $current_version "minor")
            log "Creating minor release: $current_version → $new_version"
            
            create_version_file $new_version
            update_django_settings $new_version
            generate_changelog $new_version $current_version
            
            git add .
            git commit -m "✨ Release v$new_version - Minor release with new features"
            git tag -a "v$new_version" -m "ZAIN HMS v$new_version - Minor Release"
            git push origin $CURRENT_BRANCH --tags
            
            create_github_release $new_version false
            success "Minor release v$new_version completed successfully!"
            ;;
            
        3)
            # Major release
            local new_version=$(increment_version $current_version "major")
            warning "Creating MAJOR release: $current_version → $new_version"
            echo "This will create a breaking change release. Are you sure? (y/N)"
            read -r confirmation
            
            if [[ $confirmation =~ ^[Yy]$ ]]; then
                create_version_file $new_version
                update_django_settings $new_version
                generate_changelog $new_version $current_version
                
                git add .
                git commit -m "🚀 Release v$new_version - Major release with breaking changes"
                git tag -a "v$new_version" -m "ZAIN HMS v$new_version - Major Release"
                git push origin $CURRENT_BRANCH --tags
                
                create_github_release $new_version false
                success "Major release v$new_version completed successfully!"
            else
                log "Major release cancelled"
            fi
            ;;
            
        4)
            # Pre-release
            echo "Enter pre-release type (alpha/beta/rc):"
            read -r prerelease_type
            echo "Enter pre-release number (1, 2, 3, etc.):"
            read -r prerelease_num
            
            local new_version="$current_version-$prerelease_type.$prerelease_num"
            log "Creating pre-release: $new_version"
            
            create_version_file $new_version
            update_django_settings $new_version
            
            git add .
            git commit -m "🧪 Pre-release v$new_version - $prerelease_type version"
            git tag -a "v$new_version" -m "ZAIN HMS v$new_version - Pre-release"
            git push origin $CURRENT_BRANCH --tags
            
            create_github_release $new_version true
            success "Pre-release v$new_version completed successfully!"
            ;;
            
        5)
            # View current version
            echo -e "\n${GREEN}📋 Current Version Information:${NC}"
            echo "Version: $current_version"
            echo "Branch: $CURRENT_BRANCH"
            echo "Last commit: $(git log -1 --pretty=format:'%h - %s (%cr)')"
            echo "Total commits: $(git rev-list --count HEAD)"
            echo "Contributors: $(git shortlog -sn | wc -l)"
            ;;
            
        6)
            # Release statistics
            echo -e "\n${GREEN}📊 Release Statistics:${NC}"
            echo "Current Version: $current_version"
            echo "Total Releases: $(git tag -l | grep -c '^v')"
            echo "Last 5 Releases:"
            git tag -l --sort=-version:refname | head -5 | while read tag; do
                echo "  - $tag ($(git log -1 --pretty=format:'%cr' $tag))"
            done
            ;;
            
        7)
            # Build & Deploy
            log "Initiating build and deployment process..."
            if [ -f "scripts/deploy.sh" ]; then
                bash scripts/deploy.sh $current_version
            else
                warning "Deployment script not found. Creating deployment trigger..."
                echo "$(date)" > .deployment_trigger
                git add .deployment_trigger
                git commit -m "🚀 Trigger deployment for v$current_version"
                git push origin $CURRENT_BRANCH
                success "Deployment trigger created and pushed"
            fi
            ;;
            
        8)
            log "Exiting release manager"
            exit 0
            ;;
            
        *)
            error "Invalid choice. Please select 1-8."
            ;;
    esac
}

# Run main function
main